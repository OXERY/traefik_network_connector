name: Build and Push Docker image

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # For cosign

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Determine if PR author is trusted
        if: ${{ github.event_name == 'pull_request' }}
        id: check-author
        run: |
          trusted_authors=("oxery")
          if [[ " ${trusted_authors[@]} " =~ " ${GITHUB_ACTOR} " ]]; then
            echo "Author is trusted"
            echo "::set-output name=trusted::true"
          else
            echo "Author is not trusted"
            echo "::set-output name=trusted::false"
          fi


      - name: Check for admin approval
        if: ${{ github.event_name == 'pull_request' }}
        id: check-approval
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}

          # Fetch the reviews for the pull request
          APPROVALS=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews --jq '.[] | select(.state=="APPROVED" and .author_association=="ADMIN") | .user.login')

          # Check if any of the reviews are from an admin
          if [[ -n "$APPROVALS" ]]; then
            echo "PR is approved by an admin"
            echo "::set-output name=approved::true"
          else
            echo "PR is not approved by an admin"
            echo "::set-output name=approved::false"
          fi

      - name: Build and push to GHCR
        if: ${{ github.event_name == 'push' || (steps.check-author.outputs.trusted == 'true' || steps.check-approval.outputs.approved == 'true') }}
        uses: docker/build-push-action@v5
        id: build-and-push
        with:
          context: .
          file: ./Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/oxery/traefik_network_connector:${{ github.event_name == 'push' && 'latest' || 'pr-${{ github.head_ref }}' }}
          platforms: |
            linux/amd64
            linux/arm64
            linux/i386
            linux/armhf
            linux/armel

      - name: Set up cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign the container image with cosign
        if: ${{ github.event_name == 'push' || (steps.check-author.outputs.trusted == 'true' || steps.check-approval.outputs.approved == 'true') }}
        run: |
          cosign sign --yes ghcr.io/oxery/traefik_network_connector@${DIGEST}
        env:
          COSIGN_EXPERIMENTAL: true
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
